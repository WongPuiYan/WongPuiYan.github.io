<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>算法 - Category - 揾食啫</title><link>https://wongpuiyan.github.io/categories/%E7%AE%97%E6%B3%95/</link><description>算法 - Category - 揾食啫</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>neowong@qq.com (NeoWong)</managingEditor><webMaster>neowong@qq.com (NeoWong)</webMaster><lastBuildDate>Tue, 04 Jul 2023 00:33:59 +0800</lastBuildDate><atom:link href="https://wongpuiyan.github.io/categories/%E7%AE%97%E6%B3%95/" rel="self" type="application/rss+xml"/><item><title>两两交换链表中的节点</title><link>https://wongpuiyan.github.io/24-swap-nodes-in-pairs/</link><pubDate>Tue, 04 Jul 2023 00:33:59 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/24-swap-nodes-in-pairs/</guid><description>&lt;h2 id="leetcode-24-两两交换链表中的节点">leetcode 24. 两两交换链表中的节点&lt;/h2>
&lt;p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。&lt;/p></description></item><item><title>反转链表</title><link>https://wongpuiyan.github.io/206-reverse-linked-list/</link><pubDate>Tue, 04 Jul 2023 00:18:49 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/206-reverse-linked-list/</guid><description>&lt;h2 id="leetcode-206-反转链表">Leetcode 206. 反转链表&lt;/h2>
&lt;p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。&lt;/p></description></item><item><title>设计链表</title><link>https://wongpuiyan.github.io/707-design-linked-list/</link><pubDate>Sun, 02 Jul 2023 00:07:35 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/707-design-linked-list/</guid><description><![CDATA[<h2 id="leetcode-707-设计链表">Leetcode 707. 设计链表</h2>
<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>
<p>单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针/引用。</p>
<p>如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p>
<p>实现 MyLinkedList 类：</p>
<p>MyLinkedList() 初始化 MyLinkedList 对象。
int get(int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。
void addAtHead(int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。
void addAtTail(int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。
void addAtIndex(int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。
void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为 index 的节点。</p>]]></description></item><item><title>移除链表元素</title><link>https://wongpuiyan.github.io/203-remove-linked-list-elements/</link><pubDate>Sat, 01 Jul 2023 22:40:44 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/203-remove-linked-list-elements/</guid><description>&lt;h2 id="leetcode-203-移除链表元素">leetcode 203. 移除链表元素&lt;/h2>
&lt;p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。&lt;/p></description></item><item><title>螺旋矩阵 II</title><link>https://wongpuiyan.github.io/59-spiral-matrix-ii/</link><pubDate>Sat, 01 Jul 2023 21:48:32 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/59-spiral-matrix-ii/</guid><description>&lt;h2 id="leetcode-59-螺旋矩阵-ii">Leetcode 59. 螺旋矩阵 II&lt;/h2>
&lt;p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。&lt;/p></description></item><item><title>长度最小的子数组</title><link>https://wongpuiyan.github.io/209-minimum-size-subarray-sum/</link><pubDate>Sat, 01 Jul 2023 20:57:49 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/209-minimum-size-subarray-sum/</guid><description><![CDATA[<h2 id="leetcode-209-长度最小的子数组">Leetcode 209. 长度最小的子数组</h2>
<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>
<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, &hellip;, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>]]></description></item><item><title>有序数组的平方</title><link>https://wongpuiyan.github.io/977-squares-of-a-sorted-array/</link><pubDate>Fri, 30 Jun 2023 00:05:20 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/977-squares-of-a-sorted-array/</guid><description>&lt;h2 id="leetcode-977-有序数组的平方">Leetcode 977. 有序数组的平方&lt;/h2>
&lt;p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。&lt;/p></description></item><item><title>移除元素</title><link>https://wongpuiyan.github.io/27-remove-element/</link><pubDate>Thu, 29 Jun 2023 22:46:45 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/27-remove-element/</guid><description><![CDATA[<h2 id="leetcode-27-移除元素">Leetcode 27. 移除元素</h2>
<p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>]]></description></item><item><title>二分查找</title><link>https://wongpuiyan.github.io/704-binary-search/</link><pubDate>Wed, 28 Jun 2023 23:25:04 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/704-binary-search/</guid><description>&lt;h2 id="leetcode-704-二分查找">Leetcode 704. 二分查找&lt;/h2>
&lt;p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。&lt;/p></description></item></channel></rss>