[{"categories":["算法"],"content":"二分查找 from typing import List Class Solution: def search(sefl, nums: List[int], target: int) -\u003e int: left, right = 0, len(nums) - 1 while left \u003c= right: mid = left + (right - left) // 2 if target \u003e nums[mid]: left = mid + 1 elif target \u003c nums[mid]: right = mid - 1 else: return mid return -1 package main import( \"fmt\" ) func search(nums []int, target int) int { var( left int = 0 right int = len(nums) - 1 mid int ) for left \u003c= right { mid = left + (right - left) // 2 if (num[mid] \u003c target){ left = mid + 1 }else if (num[mid] \u003e target){ right = mid - 1 }else{ return mid } } return -1 } ","date":"2023-06-28","objectID":"/binary_search/:0:0","tags":["数组","二分查找"],"title":"二分查找","uri":"/binary_search/"},{"categories":null,"content":"POSTs first print(\"Hello World\") ","date":"2023-06-27","objectID":"/base/:0:0","tags":null,"title":"Base","uri":"/base/"}]