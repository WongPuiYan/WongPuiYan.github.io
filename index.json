[{"categories":["算法"],"content":"Leetcode 142. 环形链表 II 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。 不允许修改 链表。 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def detectCycle(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if fast == slow: slow = head while slow != fast: slow = slow.next fast = fast.next return slow return None ","date":"2023-07-04","objectID":"/142-linked-list-cycle-ii/:1:0","tags":["链表","双指针","快慢指针"],"title":"环形链表 II","uri":"/142-linked-list-cycle-ii/"},{"categories":["算法"],"content":"Leetcode 160. 链表相交 (同面试题02.07) 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。 题目数据 保证 整个链式结构中不存在环。 注意，函数返回结果后，链表必须 保持其原始结构 。 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode) -\u003e Optional[ListNode]: if not(headA and headB): return None pa = headA pb = headB while pa != pb: pa = pa.next if pa else headB pb = pb.next if pb else headA return pa ","date":"2023-07-04","objectID":"/160-intersection-of-two-linked-lists-lcci/:1:0","tags":["链表","双指针"],"title":"链表相交","uri":"/160-intersection-of-two-linked-lists-lcci/"},{"categories":["算法"],"content":"leetcode 19. 删除链表的倒数第 N 个结点 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u003e Optional[ListNode]: dummy_head = ListNode(next=head) slow = dummy_head fast = head while fast: if n: n -= 1 else: slow = slow.next fast = fast.next slow.next = slow.next.next return dummy_head.next ","date":"2023-07-04","objectID":"/19-remove-nth-node-from-end-of-list/:1:0","tags":["链表","双指针","快慢指针"],"title":"删除链表的倒数第 N 个结点","uri":"/19-remove-nth-node-from-end-of-list/"},{"categories":["算法"],"content":"leetcode 24. 两两交换链表中的节点 给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def swapPairs(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: dummy_head = ListNode(next=head) current = dummy_head while current.next and current.next.next: # 保存第一个节点 tmp = current.next # 保存第三个节点 tmp_next = current.next.next.next # 头节点指向第二个节点 current.next = current.next.next # 第二个节点指向第一个节点 current.next.next = tmp # 第一个节点指向第三个节点 tmp.next = tmp_next # 更新头节点位置 current = tmp return dummy_head.next ","date":"2023-07-04","objectID":"/24-swap-nodes-in-pairs/:1:0","tags":["链表"],"title":"两两交换链表中的节点","uri":"/24-swap-nodes-in-pairs/"},{"categories":["算法"],"content":"Leetcode 206. 反转链表 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: cur = head pre = None while cur: tmp = cur.next cur.next, pre = pre, cur cur = tmp return pre ","date":"2023-07-04","objectID":"/206-reverse-linked-list/:1:0","tags":["链表","双指针"],"title":"反转链表","uri":"/206-reverse-linked-list/"},{"categories":["算法"],"content":"Leetcode 707. 设计链表 你可以选择使用单链表或者双链表，设计并实现自己的链表。 单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针/引用。 如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。 实现 MyLinkedList 类： MyLinkedList() 初始化 MyLinkedList 对象。 int get(int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。 void addAtHead(int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。 void addAtTail(int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。 void addAtIndex(int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。 void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为 index 的节点。 class Node: def __init__(self, x=0, prev=None, next=None): self.val = x self.prev = prev self.next = next class MyLinkedList: def __init__(self): self.head = None self.tail = None self.size = 0 def get(self, index: int) -\u003e int: if index \u003c 0 or index \u003e= self.size: return -1 if index \u003c self.size // 2: current = self.head for _ in range(index): current = current.next else: current = self.tail for _ in range(self.size - index - 1): current = current.prev return current.val def addAtHead(self, val: int) -\u003e None: new_node = Node(val, prev=None, next=self.head) if self.head: self.head.prev = new_node else: self.tail = new_node self.head = new_node self.size += 1 def addAtTail(self, val: int) -\u003e None: new_node = Node(val, prev=self.tail, next=None) if self.tail: self.tail.next = new_node else: self.head = new_node self.tail = new_node self.size += 1 def addAtIndex(self, index: int, val: int) -\u003e None: if index \u003c 0 or index \u003e self.size: return if index == 0: self.addAtHead(val) elif index == self.size: self.addAtTail(val) else: if index \u003c self.size // 2: current = self.head for _ in range(index - 1): current = current.next else: current = self.tail for _ in range(self.size - index): current = current.prev new_node = Node(val, prev=current, next=current.next) current.next.prev = new_node current.next = new_node self.size += 1 def deleteAtIndex(self, index: int) -\u003e None: if index \u003c 0 or index \u003e= self.size: return if index == 0: self.head = self.head.next if self.head: self.head.prev = None else: self.tail = None elif index == self.size - 1: self.tail = self.tail.prev if self.tail: self.tail.next = None else: self.head = None else: if index \u003c self.size // 2: current = self.head for _ in range(index): current = current.next else: current = self.tail for _ in range(self.size - index - 1): current = current.prev current.prev.next = current.next current.next.prev = current.prev self.size -= 1 # Your MyLinkedList object will be instantiated and called as such: # obj = MyLinkedList() # param_1 = obj.get(index) # obj.addAtHead(val) # obj.addAtTail(val) # obj.addAtIndex(index,val) # obj.deleteAtIndex(index) ","date":"2023-07-02","objectID":"/707-design-linked-list/:1:0","tags":["链表","单双链表"],"title":"设计链表","uri":"/707-design-linked-list/"},{"categories":["算法"],"content":"leetcode 203. 移除链表元素 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeElements(self, head: Optional[ListNode], val: int) -\u003e Optional[ListNode]: dummy_head = ListNode(next=head) current = dummy_head while current.next: if current.next.val == val: current.next = current.next.next else: current = current.next return dummy_head.next ","date":"2023-07-01","objectID":"/203-remove-linked-list-elements/:1:0","tags":["链表"],"title":"移除链表元素","uri":"/203-remove-linked-list-elements/"},{"categories":["算法"],"content":"Leetcode 59. 螺旋矩阵 II 给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。 class Solution: def generateMatrix(self, n: int) -\u003e List[List[int]]: res = [[0] * n for _ in range(n)] x, y = 0, 0 loop = mid = n // 2 count = 1 for i in range(1, loop + 1): # 从左到右 for j in range(y, n - i): res[x][j] = count count += 1 # 从上到下 for j in range(x, n - i): res[j][n - i] = count count += 1 # 从右到左 for j in range(n - i, y, -1): res[n - i][j] = count count += 1 # 从下到上 for j in range(n - i, x, -1): res[j][y] = count count += 1 x += 1 y += 1 if n % 2 != 0: res[mid][mid] = count return res ","date":"2023-07-01","objectID":"/59-spiral-matrix-ii/:1:0","tags":["数组","双指针","滑动窗口"],"title":"螺旋矩阵 II","uri":"/59-spiral-matrix-ii/"},{"categories":["算法"],"content":"Leetcode 209. 长度最小的子数组 给定一个含有 n 个正整数的数组和一个正整数 target 。 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。 class Solution: def minSubArrayLen(self, target: int, nums: List[int]) -\u003e int: res = len(nums) + 1 sum = l = 0 for r in range(res - 1): sum += nums[r] while sum \u003e= target: res = min(res, r - l + 1) sum -= nums[l] l += 1 return 0 if res == len(nums) + 1 else ress ","date":"2023-07-01","objectID":"/209-minimum-size-subarray-sum/:1:0","tags":["数组","双指针","滑动窗口"],"title":"长度最小的子数组","uri":"/209-minimum-size-subarray-sum/"},{"categories":["算法"],"content":"Leetcode 977. 有序数组的平方 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 class Solution: def sortedSquares(self, nums: List[int]) -\u003e List[int]: n = len(nums) res = [0] * n left, right, pos = 0, n - 1, n - 1 while left \u003c= right: if nums[left] ** 2 \u003c nums[right] ** 2: res[pos] = nums[right] ** 2 right -= 1 else: res[pos] = nums[left] ** 2 left += 1 pos -= 1 return res ","date":"2023-06-30","objectID":"/977-squares-of-a-sorted-array/:1:0","tags":["数组","双指针"],"title":"有序数组的平方","uri":"/977-squares-of-a-sorted-array/"},{"categories":["算法"],"content":"Leetcode 27. 移除元素 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 # 双指针 class Solution: def removeElement(self, nums: List[int], val: int) -\u003e int: slow = 0 for fast in nums: if fast != val: nums[slow] = fast slow += 1 return slow # 双指针优化 class Solution: def removeElement(self, nums: List[int], val: int) -\u003e int: left, right = 0, len(nums) while left \u003c right: if nums[left] == val: nums[left] = nums[right - 1] right -= 1 else: left += 1 return left // 双指针 func removeElement(nums []int, val int) int { var( slow int = 0 ) for _, fast := range nums{ if (fast != val) { nums[slow] = fast slow++ } } return slow } // 双指针优化 func removeElement(nums []int, val int) int { var( left int = 0 right int = len(nums) ) for(left \u003c right) { if nums[left] == val { nums[left] = nums[right - 1] right-- }else{ left++ } } return left } ","date":"2023-06-29","objectID":"/27-remove-element/:1:0","tags":["数组","双指针"],"title":"移除元素","uri":"/27-remove-element/"},{"categories":["算法"],"content":"Leetcode 704. 二分查找 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 Class Solution: def search(sefl, nums: List[int], target: int) -\u003e int: left, right = 0, len(nums) - 1 while left \u003c= right: mid = left + (right - left) // 2 if target \u003e nums[mid]: left = mid + 1 elif target \u003c nums[mid]: right = mid - 1 else: return mid return -1 func search(nums []int, target int) int { var( left int = 0 right int = len(nums) - 1 mid int ) for left \u003c= right { mid = left + (right - left) // 2 if (num[mid] \u003c target){ left = mid + 1 }else if (num[mid] \u003e target){ right = mid - 1 }else{ return mid } } return -1 } ","date":"2023-06-28","objectID":"/704-binary-search/:1:0","tags":["数组","双指针","二分查找"],"title":"二分查找","uri":"/704-binary-search/"},{"categories":null,"content":"POSTs first print(\"Hello World\") ","date":"2023-06-27","objectID":"/base/:0:0","tags":null,"title":"Base","uri":"/base/"}]