[{"categories":["算法"],"content":"239. 滑动窗口最大值 给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。 返回 滑动窗口中的最大值 。 class Solution: def maxSlidingWindow(self, nums: List[int], k: int) -\u003e List[int]: que = collections.deque() for i in range(k): while que and nums[i] \u003e= nums[que[-1]]: que.pop() que.append(i) res = [nums[que[0]]] for i in range(k, len(nums)): while que and nums[i] \u003e= nums[que[-1]]: que.pop() que.append(i) while que[0] \u003c= i - k: que.popleft() res.append(nums[que[0]]) return res ","date":"2023-07-11","objectID":"/239-sliding-window-maximum/:1:0","tags":["栈","队列","双指针"],"title":"滑动窗口最大值","uri":"/239-sliding-window-maximum/"},{"categories":["算法"],"content":"150. 逆波兰表达式求值 给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。 请你计算该表达式。返回一个表示表达式值的整数。 注意： 有效的算符为 ‘+’、’-’、’*’ 和 ‘/’ 。 每个操作数（运算对象）都可以是一个整数或者另一个表达式。 两个整数之间的除法总是 向零截断 。 表达式中不含除零运算。 输入是一个根据逆波兰表示法表示的算术表达式。 答案及所有中间计算结果可以用 32 位 整数表示。 class Solution: def evalRPN(self, tokens: List[str]) -\u003e int: op_map = { \"+\": lambda x, y: int(x + y), \"-\": lambda x, y: int(x - y), \"*\": lambda x, y: int(x * y), \"/\": lambda x, y: int(x / y), } stack = [] for token in tokens: if token not in op_map: stack.append(int(token)) else: y = stack.pop() x = stack.pop() stack.append(op_map[token](x, y)) return stack.pop() ","date":"2023-07-11","objectID":"/150-evaluate-reverse-polish-notation/:1:0","tags":["栈","队列"],"title":"逆波兰表达式求值","uri":"/150-evaluate-reverse-polish-notation/"},{"categories":["算法"],"content":"1047. 删除字符串中的所有相邻重复项 给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。 在 S 上反复执行重复项删除操作，直到无法继续删除。 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。 # 栈 class Solution: def removeDuplicates(self, s: str) -\u003e str: res = list() for item in s: if res and res[-1] == item: res.pop() else: res.append(item) return \"\".join(res) # 双指针 class Solution: def removeDuplicates(self, s: str) -\u003e str: res = list(s) slow = 0 fast = 0 n = len(res) while fast \u003c n: res[slow] = res[fast] if slow \u003e 0 and res[slow] == res[slow - 1]: slow -= 1 else: slow += 1 fast += 1 return ''.join(res[:slow]) ","date":"2023-07-11","objectID":"/1047-remove-all-adjacent-duplicates-in-string/:1:0","tags":["栈","队列","双指针"],"title":"删除字符串中的所有相邻重复项","uri":"/1047-remove-all-adjacent-duplicates-in-string/"},{"categories":["算法"],"content":"20. 有效的括号 给定一个只包括 ‘(’，’)’，’{’，’}’，’[’，’]’ 的字符串 s ，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 每个右括号都有一个对应的相同类型的左括号。 class Solution: def isValid(self, s: str) -\u003e bool: stack = [] for item in s: if item == \"(\": stack.append(\")\") elif item == \"[\": stack.append(\"]\") elif item == \"{\": stack.append(\"}\") elif not stack or stack[-1] != item: return False else: stack.pop() return not stack ","date":"2023-07-09","objectID":"/20-valid-parentheses/:1:0","tags":["栈","队列"],"title":"有效的括号","uri":"/20-valid-parentheses/"},{"categories":["算法"],"content":"225. 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。 实现 MyStack 类： void push(int x) 将元素 x 压入栈顶。 int pop() 移除并返回栈顶元素。 int top() 返回栈顶元素。 boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。 注意： 你只能使用队列的基本操作 —— 也就是 push to back、peek/pop from front、size 和 is empty 这些操作。 你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。 class MyStack: def __init__(self): from collections import deque self.que = deque() def push(self, x: int) -\u003e None: self.que.append(x) def pop(self) -\u003e int: if self.empty(): return None for i in range(len(self.que) - 1): self.que.append(self.que.popleft()) return self.que.popleft() def top(self) -\u003e int: if self.empty(): return None else: return self.que[-1] def empty(self) -\u003e bool: return not self.que # Your MyStack object will be instantiated and called as such: # obj = MyStack() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.top() # param_4 = obj.empty() ","date":"2023-07-09","objectID":"/225-implement-stack-using-queues/:1:0","tags":["栈","队列"],"title":"用队列实现栈","uri":"/225-implement-stack-using-queues/"},{"categories":["算法"],"content":"232. 用栈实现队列 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）： 实现 MyQueue 类： void push(int x) 将元素 x 推到队列的末尾 int pop() 从队列的开头移除并返回元素 int peek() 返回队列开头的元素 boolean empty() 如果队列为空，返回 true ；否则，返回 false 说明： 你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。 class MyQueue: def __init__(self): self.stack_in = [] self.stack_out = [] def push(self, x: int) -\u003e None: self.stack_in.append(x) def pop(self) -\u003e int: if self.empty(): return None if not self.stack_out: for i in range(len(self.stack_in)): self.stack_out.append(self.stack_in.pop()) return self.stack_out.pop() def peek(self) -\u003e int: res = self.pop() self.stack_out.append(res) return res def empty(self) -\u003e bool: return not (self.stack_in or self.stack_out) # Your MyQueue object will be instantiated and called as such: # obj = MyQueue() # obj.push(x) # param_2 = obj.pop() # param_3 = obj.peek() # param_4 = obj.empty() ","date":"2023-07-09","objectID":"/232-implement-queue-using-stacks/:1:0","tags":["栈","队列"],"title":"用栈实现队列","uri":"/232-implement-queue-using-stacks/"},{"categories":["算法"],"content":"28. 找出字符串中第一个匹配项的下标 给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回 -1 。 # 前缀表（减一） class Solution: def getNext(self, next: List[int], s: str) -\u003e None: j = -1 next[0] = j for i in range(1, len(s)): while j \u003e= 0 and s[i] != s[j+1]: j = next[j] if s[i] == s[j+1]: j += 1 next[i] = j def strStr(self, haystack: str, needle: str) -\u003e int: if not needle: return 0 next = [0] * len(needle) self.getNext(next, needle) j = -1 for i in range(len(haystack)): while j \u003e= 0 and haystack[i] != needle[j+1]: j = next[j] if haystack[i] == needle[j+1]: j += 1 if j == len(needle) - 1: return i - len(needle) + 1 return -1 # 前缀表（不减一） class Solution: def getNext(self, next: List[int], s: str) -\u003e None: j = 0 next[0] = 0 for i in range(1, len(s)): while j \u003e 0 and s[i] != s[j]: j = next[j - 1] if s[i] == s[j]: j += 1 next[i] = j def strStr(self, haystack: str, needle: str) -\u003e int: if len(needle) == 0: return 0 next = [0] * len(needle) self.getNext(next, needle) j = 0 for i in range(len(haystack)): while j \u003e 0 and haystack[i] != needle[j]: j = next[j - 1] if haystack[i] == needle[j]: j += 1 if j == len(needle): return i - len(needle) + 1 return -1 # 暴力法 class Solution(object): def strStr(self, haystack: str, needle: str) -\u003e int: m, n = len(haystack), len(needle) for i in range(m): if haystack[i:i+n] == needle: return i return -1 # 使用index class Solution: def strStr(self, haystack: str, needle: str) -\u003e int: try: return haystack.index(needle) except ValueError: return -1 # 使用index class Solution: def strStr(self, haystack: str, needle: str) -\u003e int: return haystack.find(needle) ","date":"2023-07-07","objectID":"/28-find-the-index-of-the-first-occurrence-in-a-string/:1:0","tags":["哈希表","KMP"],"title":"找出字符串中第一个匹配项的下标","uri":"/28-find-the-index-of-the-first-occurrence-in-a-string/"},{"categories":["算法"],"content":"344. 反转字符串 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。 # 双指针 class Solution: def reverseString(self, s: List[str]) -\u003e None: \"\"\" Do not return anything, modify s in-place instead. \"\"\" left, right = 0, len(s) - 1 while left \u003c right: s[left], s[right] = s[right], s[left] left += 1 right -= 1 # 列表推导式 class Solution: def reverseString(self, s: List[str]) -\u003e None: \"\"\" Do not return anything, modify s in-place instead. \"\"\" s[:] = [s[i] for i in range(len(s) - 1, -1, -1)] # 切片 class Solution: def reverseString(self, s: List[str]) -\u003e None: \"\"\" Do not return anything, modify s in-place instead. \"\"\" s[:] = s[::-1] ","date":"2023-07-06","objectID":"/344-reverse-string/:1:0","tags":["字符串","双指针"],"title":"反转字符串","uri":"/344-reverse-string/"},{"categories":["算法"],"content":"18. 四数之和 给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）： 0 \u003c= a, b, c, d \u003c n a、b、c 和 d 互不相同 nums[a] + nums[b] + nums[c] + nums[d] == target 你可以按 任意顺序 返回答案 。 # 双指针 class Solution: def fourSum(self, nums: List[int], target: int) -\u003e List[List[int]]: nums.sort() n = len(nums) result = [] for i in range(n): if nums[i] \u003e target and nums[i] \u003e 0 and target \u003e 0: break if i \u003e 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n): if nums[i] + nums[j] \u003e target and target \u003e 0: break if i + 1 \u003c j and nums[j] == nums[j - 1]: continue left = j + 1 right = n - 1 while left \u003c right: tmp_sum = nums[i] + nums[j] + nums[left] + nums[right] if tmp_sum \u003c target: left += 1 elif tmp_sum \u003e target: right -= 1 else: result.append([nums[i], nums[j], nums[left], nums[right]]) while left \u003c right and nums[left] == nums[left + 1]: left += 1 while left \u003c right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result # 字典 class Solution: def fourSum(self, nums: List[int], target: int) -\u003e List[List[int]]: freq = {} res = set() n = len(nums) for num in nums: freq[num] = freq.get(num, 0) + 1 for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): val = target - (nums[i] + nums[j] + nums[k]) if val in freq: count = (nums[i] == val) + (nums[j] == val) + (nums[k] == val) if freq[val] \u003e count: res.add(tuple(sorted([nums[i], nums[j], nums[k], val]))) return [list(i) for i in res] ","date":"2023-07-06","objectID":"/18-4sum/:1:0","tags":["哈希表","双指针"],"title":"四数之和","uri":"/18-4sum/"},{"categories":["算法"],"content":"15. 三数之和 给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请 你返回所有和为 0 且不重复的三元组。 注意：答案中不可以包含重复的三元组。 # 双指针 class Solution: def threeSum(self, nums: List[int]) -\u003e List[List[int]]: result = [] nums.sort() n = len(nums) for i in range(n): if nums[0] \u003e 0: break if i \u003e 0 and nums[i] == nums[i - 1]: continue left = i + 1 right = n - 1 while left \u003c right: tmp_sum = nums[i] + nums[left] + nums[right] if tmp_sum \u003c 0: left += 1 elif tmp_sum \u003e 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left \u003c right and nums[left] == nums[left + 1]: left += 1 while left \u003c right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result # 字典 class Solution: def threeSum(self, nums: List[int]) -\u003e List[List[int]]: result = [] nums.sort() n = len(nums) for i in range(n): if nums[0] \u003e 0: break if i \u003e 0 and nums[i] == nums[i - 1]: continue tmp_dict = {} for j in range(i + 1, n): if i + 2 \u003c j and nums[j] == nums[j - 1] == nums[j - 2]: continue c = 0 - (nums[i] + nums[j]) if c in tmp_dict: result.append([nums[i], nums[j], c]) tmp_dict.pop(c) else: tmp_dict[nums[j]] = j return result ","date":"2023-07-06","objectID":"/15-3sum/:1:0","tags":["哈希表","双指针"],"title":"三数之和","uri":"/15-3sum/"},{"categories":["算法"],"content":"383. 赎金信 给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。 如果可以，返回 true ；否则返回 false 。 magazine 中的每个字符只能在 ransomNote 中使用一次。 # 列表 class Solution: def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool: ransom_count = [0] * 26 magazine_count = [0] * 26 for c in ransomNote: ransom_count[ord(c) - ord('a')] += 1 for c in magazine: magazine_count[ord(c) - ord('a')] += 1 return all(ransom_count[i] \u003c= magazine_count[i] for i in range(26)) # 字典 class Solution: def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool: counts = {} for c in magazine: counts[c] = counts.get(c, 0) + 1 for c in ransomNote: if c not in counts or counts[c] == 0: return False counts[c] -= 1 return True # Counter class Solution: def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool: from collections import Counter return not Counter(ransomNote) - Counter(magazine) # count class Solution: def canConstruct(self, ransomNote: str, magazine: str) -\u003e bool: return all(ransomNote.count(c) \u003c= magazine.count(c) for c in set(ransomNote)) ","date":"2023-07-06","objectID":"/383-ransom-note/:1:0","tags":["哈希表"],"title":"赎金信","uri":"/383-ransom-note/"},{"categories":["算法"],"content":"454. 四数相加 II 给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足： 0 \u003c= i, j, k, l \u003c n nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0 class Solution: def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -\u003e int: records = dict() count = 0 for n1 in nums1: for n2 in nums2: records[n1 + n2] = records.get(n1 + n2, 0) + 1 for n3 in nums3: for n4 in nums4: key = - n3 - n4 if key in records: count += records[key] return count ","date":"2023-07-05","objectID":"/454-4sum-ii/:1:0","tags":["哈希表","双指针","快慢指针"],"title":"四数相加 II","uri":"/454-4sum-ii/"},{"categories":["算法"],"content":"1. 两数之和 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 # 集合 class Solution: def twoSum(self, nums: List[int], target: int) -\u003e List[int]: records = set() for index, value in enumerate(nums): tmp = target - value if tmp in records: return [index, nums.index(tmp)] records.add(value) # 字典 class Solution: def twoSum(self, nums: List[int], target: int) -\u003e List[int]: records = dict() for index, value in enumerate(nums): tmp = target - value if tmp in records: return [index, records[tmp]] records[value] = index ","date":"2023-07-05","objectID":"/1-two-sum/:1:0","tags":["哈希表"],"title":"两数之和","uri":"/1-two-sum/"},{"categories":["算法"],"content":"202. 快乐数 编写一个算法来判断一个数 n 是不是快乐数。 「快乐数」 定义为： 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。 然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。 如果这个过程 结果为 1，那么这个数就是快乐数。 如果 n 是 快乐数 就返回 true ；不是，则返回 false 。 # 数组 class Solution: def isHappy(self, n: int) -\u003e bool: def get_next(number): total_sum = 0 while number \u003e 0: number, digit = divmod(number, 10) total_sum += digit ** 2 return total_sum exist = [] while n != 1: n = get_next(n) if n in exist: return False exist.append(n) return True # 集合 class Solution: def isHappy(self, n: int) -\u003e bool: def get_next(number): total_sum = 0 while number \u003e 0: number, digit = divmod(number, 10) total_sum += digit ** 2 return total_sum exist = set() while n != 1 and n not in exist: exist.add(n) n = get_next(n) return n == 1 # 快慢指针 class Solution: def isHappy(self, n: int) -\u003e bool: def get_next(number): total_sum = 0 while number \u003e 0: number, digit = divmod(number, 10) total_sum += digit ** 2 return total_sum slow = n fast = get_next(n) while fast != 1 and fast != slow: slow = get_next(slow) fast = get_next(get_next(fast)) return fast == 1 ","date":"2023-07-05","objectID":"/202-happy-number/:1:0","tags":["哈希表","双指针","快慢指针"],"title":"快乐数","uri":"/202-happy-number/"},{"categories":["算法"],"content":"349. 两个数组的交集 给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。 # 字典与集合 class Solution: def intersection(self, nums1: List[int], nums2: List[int]) -\u003e List[int]: table = {} for num in nums1: table[num] = table.get(num, 0) + 1 res = set() for num in nums2: if num in table: res.add(num) del table[num] return list(res) # 数组 class Solution: def intersection(self, nums1: List[int], nums2: List[int]) -\u003e List[int]: count1 = [0] * 1001 count2 = [0] * 1001 res = [] for i in nums1: count1[i] += 1 for i in nums2: count2[i] += 1 for i in range(1001): if count1[i] * count2[i] \u003e 0: res.append(i) return res # 集合 class Solution: def intersection(self, nums1: List[int], nums2: List[int]) -\u003e List[int]: return list(set(nums1) \u0026 set(nums2)) ","date":"2023-07-04","objectID":"/349-intersection-of-two-arrays/:1:0","tags":["哈希表","散列表"],"title":"两个数组的交集","uri":"/349-intersection-of-two-arrays/"},{"categories":["算法"],"content":"242. 有效的字母异位词 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。 注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。 # 数组 class Solution: def isAnagram(self, s: str, t: str) -\u003e bool: record = [0] * 26 for i in s: record[ord(i) - ord(\"a\")] += 1 for i in t: record[ord(i) - ord(\"a\")] -= 1 for i in record: if i != 0: return False return True # 字典 class Solution: def isAnagram(self, s: str, t: str) -\u003e bool: s_dict = {} t_dict = {} for i in s: s_dict[i] = s_dict.get(i, 0) + 1 for i in t: t_dict[i] = t_dict.get(i, 0) + 1 return s_dict == t_dict # 默认字典 class Solution: def isAnagram(self, s: str, t: str) -\u003e bool: from collections import defaultdict s_dict = defaultdict(int) t_dict = defaultdict(int) for i in s: s_dict[i] += 1 for i in t: t_dict[i] += 1 return s_dict == t_dict # 计数器 class Solution: def isAnagram(self, s: str, t: str) -\u003e bool: from collections import Counter s_count = Counter(s) t_count = Counter(t) return s_count == t_count ","date":"2023-07-04","objectID":"/242-valid-anagram/:1:0","tags":["哈希表","散列表"],"title":"有效的字母异位词","uri":"/242-valid-anagram/"},{"categories":["算法"],"content":"Leetcode 142. 环形链表 II 给定一个链表的头节点 head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。 不允许修改 链表。 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def detectCycle(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if fast == slow: slow = head while slow != fast: slow = slow.next fast = fast.next return slow return None ","date":"2023-07-04","objectID":"/142-linked-list-cycle-ii/:1:0","tags":["链表","双指针","快慢指针"],"title":"环形链表 II","uri":"/142-linked-list-cycle-ii/"},{"categories":["算法"],"content":"Leetcode 160. 链表相交 (同面试题02.07) 给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。 题目数据 保证 整个链式结构中不存在环。 注意，函数返回结果后，链表必须 保持其原始结构 。 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def getIntersectionNode(self, headA: ListNode, headB: ListNode) -\u003e Optional[ListNode]: if not(headA and headB): return None pa = headA pb = headB while pa != pb: pa = pa.next if pa else headB pb = pb.next if pb else headA return pa ","date":"2023-07-04","objectID":"/160-intersection-of-two-linked-lists-lcci/:1:0","tags":["链表","双指针"],"title":"链表相交","uri":"/160-intersection-of-two-linked-lists-lcci/"},{"categories":["算法"],"content":"leetcode 19. 删除链表的倒数第 N 个结点 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeNthFromEnd(self, head: Optional[ListNode], n: int) -\u003e Optional[ListNode]: dummy_head = ListNode(next=head) slow = dummy_head fast = head while fast: if n: n -= 1 else: slow = slow.next fast = fast.next slow.next = slow.next.next return dummy_head.next ","date":"2023-07-04","objectID":"/19-remove-nth-node-from-end-of-list/:1:0","tags":["链表","双指针","快慢指针"],"title":"删除链表的倒数第 N 个结点","uri":"/19-remove-nth-node-from-end-of-list/"},{"categories":["算法"],"content":"leetcode 24. 两两交换链表中的节点 给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def swapPairs(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: dummy_head = ListNode(next=head) current = dummy_head while current.next and current.next.next: # 保存第一个节点 tmp = current.next # 保存第三个节点 tmp_next = current.next.next.next # 头节点指向第二个节点 current.next = current.next.next # 第二个节点指向第一个节点 current.next.next = tmp # 第一个节点指向第三个节点 tmp.next = tmp_next # 更新头节点位置 current = tmp return dummy_head.next ","date":"2023-07-04","objectID":"/24-swap-nodes-in-pairs/:1:0","tags":["链表"],"title":"两两交换链表中的节点","uri":"/24-swap-nodes-in-pairs/"},{"categories":["算法"],"content":"Leetcode 206. 反转链表 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseList(self, head: Optional[ListNode]) -\u003e Optional[ListNode]: cur = head pre = None while cur: tmp = cur.next cur.next, pre = pre, cur cur = tmp return pre ","date":"2023-07-04","objectID":"/206-reverse-linked-list/:1:0","tags":["链表","双指针"],"title":"反转链表","uri":"/206-reverse-linked-list/"},{"categories":["算法"],"content":"Leetcode 707. 设计链表 你可以选择使用单链表或者双链表，设计并实现自己的链表。 单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针/引用。 如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。 实现 MyLinkedList 类： MyLinkedList() 初始化 MyLinkedList 对象。 int get(int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。 void addAtHead(int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。 void addAtTail(int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。 void addAtIndex(int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。 void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为 index 的节点。 class Node: def __init__(self, x=0, prev=None, next=None): self.val = x self.prev = prev self.next = next class MyLinkedList: def __init__(self): self.head = None self.tail = None self.size = 0 def get(self, index: int) -\u003e int: if index \u003c 0 or index \u003e= self.size: return -1 if index \u003c self.size // 2: current = self.head for _ in range(index): current = current.next else: current = self.tail for _ in range(self.size - index - 1): current = current.prev return current.val def addAtHead(self, val: int) -\u003e None: new_node = Node(val, prev=None, next=self.head) if self.head: self.head.prev = new_node else: self.tail = new_node self.head = new_node self.size += 1 def addAtTail(self, val: int) -\u003e None: new_node = Node(val, prev=self.tail, next=None) if self.tail: self.tail.next = new_node else: self.head = new_node self.tail = new_node self.size += 1 def addAtIndex(self, index: int, val: int) -\u003e None: if index \u003c 0 or index \u003e self.size: return if index == 0: self.addAtHead(val) elif index == self.size: self.addAtTail(val) else: if index \u003c self.size // 2: current = self.head for _ in range(index - 1): current = current.next else: current = self.tail for _ in range(self.size - index): current = current.prev new_node = Node(val, prev=current, next=current.next) current.next.prev = new_node current.next = new_node self.size += 1 def deleteAtIndex(self, index: int) -\u003e None: if index \u003c 0 or index \u003e= self.size: return if index == 0: self.head = self.head.next if self.head: self.head.prev = None else: self.tail = None elif index == self.size - 1: self.tail = self.tail.prev if self.tail: self.tail.next = None else: self.head = None else: if index \u003c self.size // 2: current = self.head for _ in range(index): current = current.next else: current = self.tail for _ in range(self.size - index - 1): current = current.prev current.prev.next = current.next current.next.prev = current.prev self.size -= 1 # Your MyLinkedList object will be instantiated and called as such: # obj = MyLinkedList() # param_1 = obj.get(index) # obj.addAtHead(val) # obj.addAtTail(val) # obj.addAtIndex(index,val) # obj.deleteAtIndex(index) ","date":"2023-07-02","objectID":"/707-design-linked-list/:1:0","tags":["链表","单双链表"],"title":"设计链表","uri":"/707-design-linked-list/"},{"categories":["算法"],"content":"leetcode 203. 移除链表元素 给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def removeElements(self, head: Optional[ListNode], val: int) -\u003e Optional[ListNode]: dummy_head = ListNode(next=head) current = dummy_head while current.next: if current.next.val == val: current.next = current.next.next else: current = current.next return dummy_head.next ","date":"2023-07-01","objectID":"/203-remove-linked-list-elements/:1:0","tags":["链表"],"title":"移除链表元素","uri":"/203-remove-linked-list-elements/"},{"categories":["算法"],"content":"Leetcode 59. 螺旋矩阵 II 给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。 class Solution: def generateMatrix(self, n: int) -\u003e List[List[int]]: res = [[0] * n for _ in range(n)] x, y = 0, 0 loop = mid = n // 2 count = 1 for i in range(1, loop + 1): # 从左到右 for j in range(y, n - i): res[x][j] = count count += 1 # 从上到下 for j in range(x, n - i): res[j][n - i] = count count += 1 # 从右到左 for j in range(n - i, y, -1): res[n - i][j] = count count += 1 # 从下到上 for j in range(n - i, x, -1): res[j][y] = count count += 1 x += 1 y += 1 if n % 2 != 0: res[mid][mid] = count return res ","date":"2023-07-01","objectID":"/59-spiral-matrix-ii/:1:0","tags":["数组","双指针","滑动窗口"],"title":"螺旋矩阵 II","uri":"/59-spiral-matrix-ii/"},{"categories":["算法"],"content":"Leetcode 209. 长度最小的子数组 给定一个含有 n 个正整数的数组和一个正整数 target 。 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。 class Solution: def minSubArrayLen(self, target: int, nums: List[int]) -\u003e int: res = len(nums) + 1 sum = l = 0 for r in range(res - 1): sum += nums[r] while sum \u003e= target: res = min(res, r - l + 1) sum -= nums[l] l += 1 return 0 if res == len(nums) + 1 else ress ","date":"2023-07-01","objectID":"/209-minimum-size-subarray-sum/:1:0","tags":["数组","双指针","滑动窗口"],"title":"长度最小的子数组","uri":"/209-minimum-size-subarray-sum/"},{"categories":["算法"],"content":"Leetcode 977. 有序数组的平方 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。 class Solution: def sortedSquares(self, nums: List[int]) -\u003e List[int]: n = len(nums) res = [0] * n left, right, pos = 0, n - 1, n - 1 while left \u003c= right: if nums[left] ** 2 \u003c nums[right] ** 2: res[pos] = nums[right] ** 2 right -= 1 else: res[pos] = nums[left] ** 2 left += 1 pos -= 1 return res ","date":"2023-06-30","objectID":"/977-squares-of-a-sorted-array/:1:0","tags":["数组","双指针"],"title":"有序数组的平方","uri":"/977-squares-of-a-sorted-array/"},{"categories":["算法"],"content":"Leetcode 27. 移除元素 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 # 双指针 class Solution: def removeElement(self, nums: List[int], val: int) -\u003e int: slow = 0 for fast in nums: if fast != val: nums[slow] = fast slow += 1 return slow # 双指针优化 class Solution: def removeElement(self, nums: List[int], val: int) -\u003e int: left, right = 0, len(nums) while left \u003c right: if nums[left] == val: nums[left] = nums[right - 1] right -= 1 else: left += 1 return left // 双指针 func removeElement(nums []int, val int) int { var( slow int = 0 ) for _, fast := range nums{ if (fast != val) { nums[slow] = fast slow++ } } return slow } // 双指针优化 func removeElement(nums []int, val int) int { var( left int = 0 right int = len(nums) ) for(left \u003c right) { if nums[left] == val { nums[left] = nums[right - 1] right-- }else{ left++ } } return left } ","date":"2023-06-29","objectID":"/27-remove-element/:1:0","tags":["数组","双指针"],"title":"移除元素","uri":"/27-remove-element/"},{"categories":["算法"],"content":"Leetcode 704. 二分查找 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 Class Solution: def search(sefl, nums: List[int], target: int) -\u003e int: left, right = 0, len(nums) - 1 while left \u003c= right: mid = left + (right - left) // 2 if target \u003e nums[mid]: left = mid + 1 elif target \u003c nums[mid]: right = mid - 1 else: return mid return -1 func search(nums []int, target int) int { var( left int = 0 right int = len(nums) - 1 mid int ) for left \u003c= right { mid = left + (right - left) // 2 if (num[mid] \u003c target){ left = mid + 1 }else if (num[mid] \u003e target){ right = mid - 1 }else{ return mid } } return -1 } ","date":"2023-06-28","objectID":"/704-binary-search/:1:0","tags":["数组","双指针","二分查找"],"title":"二分查找","uri":"/704-binary-search/"},{"categories":null,"content":"POSTs first print(\"Hello World\") ","date":"2023-06-27","objectID":"/base/:0:0","tags":null,"title":"Base","uri":"/base/"}]