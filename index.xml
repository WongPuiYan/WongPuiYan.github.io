<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>揾食啫</title><link>https://wongpuiyan.github.io/</link><description>每天记录一点点</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>neowong@qq.com (NeoWong)</managingEditor><webMaster>neowong@qq.com (NeoWong)</webMaster><lastBuildDate>Wed, 05 Jul 2023 00:12:30 +0800</lastBuildDate><atom:link href="https://wongpuiyan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>快乐数</title><link>https://wongpuiyan.github.io/202-happy-number/</link><pubDate>Wed, 05 Jul 2023 00:12:30 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/202-happy-number/</guid><description><![CDATA[<h2 id="202-快乐数">202. 快乐数</h2>
<p>编写一个算法来判断一个数 n 是不是快乐数。</p>
<p>「快乐数」 定义为：</p>
<p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
如果这个过程 结果为 1，那么这个数就是快乐数。
如果 n 是 快乐数 就返回 true ；不是，则返回 false 。</p>]]></description></item><item><title>两个数组的交集</title><link>https://wongpuiyan.github.io/349-intersection-of-two-arrays/</link><pubDate>Tue, 04 Jul 2023 23:54:02 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/349-intersection-of-two-arrays/</guid><description>&lt;h2 id="349-两个数组的交集">349. 两个数组的交集&lt;/h2>
&lt;p>给定两个数组 nums1 和 nums2 ，返回 它们的交集 。输出结果中的每个元素一定是 唯一 的。我们可以 不考虑输出结果的顺序 。&lt;/p></description></item><item><title>有效的字母异位词</title><link>https://wongpuiyan.github.io/242-valid-anagram/</link><pubDate>Tue, 04 Jul 2023 23:42:33 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/242-valid-anagram/</guid><description><![CDATA[<h2 id="242-有效的字母异位词">242. 有效的字母异位词</h2>
<p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p>
<p>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。</p>]]></description></item><item><title>环形链表 II</title><link>https://wongpuiyan.github.io/142-linked-list-cycle-ii/</link><pubDate>Tue, 04 Jul 2023 00:58:15 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/142-linked-list-cycle-ii/</guid><description><![CDATA[<h2 id="leetcode-142-环形链表-ii">Leetcode 142. 环形链表 II</h2>
<p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>不允许修改 链表。</p>]]></description></item><item><title>链表相交</title><link>https://wongpuiyan.github.io/160-intersection-of-two-linked-lists-lcci/</link><pubDate>Tue, 04 Jul 2023 00:43:03 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/160-intersection-of-two-linked-lists-lcci/</guid><description><![CDATA[<h2 id="leetcode-160-链表相交-同面试题0207">Leetcode 160. 链表相交 (同面试题02.07)</h2>
<p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p>
<p>题目数据 保证 整个链式结构中不存在环。</p>
<p>注意，函数返回结果后，链表必须 保持其原始结构 。</p>]]></description></item><item><title>删除链表的倒数第 N 个结点</title><link>https://wongpuiyan.github.io/19-remove-nth-node-from-end-of-list/</link><pubDate>Tue, 04 Jul 2023 00:40:30 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/19-remove-nth-node-from-end-of-list/</guid><description>&lt;h2 id="leetcode-19-删除链表的倒数第-n-个结点">leetcode 19. 删除链表的倒数第 N 个结点&lt;/h2>
&lt;p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。&lt;/p></description></item><item><title>两两交换链表中的节点</title><link>https://wongpuiyan.github.io/24-swap-nodes-in-pairs/</link><pubDate>Tue, 04 Jul 2023 00:33:59 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/24-swap-nodes-in-pairs/</guid><description>&lt;h2 id="leetcode-24-两两交换链表中的节点">leetcode 24. 两两交换链表中的节点&lt;/h2>
&lt;p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。&lt;/p></description></item><item><title>反转链表</title><link>https://wongpuiyan.github.io/206-reverse-linked-list/</link><pubDate>Tue, 04 Jul 2023 00:18:49 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/206-reverse-linked-list/</guid><description>&lt;h2 id="leetcode-206-反转链表">Leetcode 206. 反转链表&lt;/h2>
&lt;p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。&lt;/p></description></item><item><title>设计链表</title><link>https://wongpuiyan.github.io/707-design-linked-list/</link><pubDate>Sun, 02 Jul 2023 00:07:35 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/707-design-linked-list/</guid><description><![CDATA[<h2 id="leetcode-707-设计链表">Leetcode 707. 设计链表</h2>
<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>
<p>单链表中的节点应该具备两个属性：val 和 next 。val 是当前节点的值，next 是指向下一个节点的指针/引用。</p>
<p>如果是双向链表，则还需要属性 prev 以指示链表中的上一个节点。假设链表中的所有节点下标从 0 开始。</p>
<p>实现 MyLinkedList 类：</p>
<p>MyLinkedList() 初始化 MyLinkedList 对象。
int get(int index) 获取链表中下标为 index 的节点的值。如果下标无效，则返回 -1 。
void addAtHead(int val) 将一个值为 val 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。
void addAtTail(int val) 将一个值为 val 的节点追加到链表中作为链表的最后一个元素。
void addAtIndex(int index, int val) 将一个值为 val 的节点插入到链表中下标为 index 的节点之前。如果 index 等于链表的长度，那么该节点会被追加到链表的末尾。如果 index 比长度更大，该节点将 不会插入 到链表中。
void deleteAtIndex(int index) 如果下标有效，则删除链表中下标为 index 的节点。</p>]]></description></item><item><title>移除链表元素</title><link>https://wongpuiyan.github.io/203-remove-linked-list-elements/</link><pubDate>Sat, 01 Jul 2023 22:40:44 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/203-remove-linked-list-elements/</guid><description>&lt;h2 id="leetcode-203-移除链表元素">leetcode 203. 移除链表元素&lt;/h2>
&lt;p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。&lt;/p></description></item></channel></rss>