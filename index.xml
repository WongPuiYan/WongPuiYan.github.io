<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>揾食啫</title><link>https://wongpuiyan.github.io/</link><description>每天记录一点点</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>neowong@qq.com (NeoWong)</managingEditor><webMaster>neowong@qq.com (NeoWong)</webMaster><lastBuildDate>Sun, 09 Jul 2023 22:44:15 +0800</lastBuildDate><atom:link href="https://wongpuiyan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>用队列实现栈</title><link>https://wongpuiyan.github.io/225-implement-stack-using-queues/</link><pubDate>Sun, 09 Jul 2023 22:44:15 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/225-implement-stack-using-queues/</guid><description><![CDATA[<h2 id="225">225.</h2>
<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p>
<p>实现 MyStack 类：</p>
<ul>
<li>void push(int x) 将元素 x 压入栈顶。</li>
<li>int pop() 移除并返回栈顶元素。</li>
<li>int top() 返回栈顶元素。</li>
<li>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</li>
</ul>
<p>注意：</p>
<ul>
<li>你只能使用队列的基本操作 —— 也就是 push to back、peek/pop from front、size 和 is empty 这些操作。</li>
<li>你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li>
</ul>]]></description></item><item><title>用栈实现队列</title><link>https://wongpuiyan.github.io/232-implement-queue-using-stacks/</link><pubDate>Sun, 09 Jul 2023 22:31:18 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/232-implement-queue-using-stacks/</guid><description><![CDATA[<h2 id="232-用栈实现队列">232. 用栈实现队列</h2>
<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p>
<p>实现 MyQueue 类：</p>
<ul>
<li>void push(int x) 将元素 x 推到队列的末尾</li>
<li>int pop() 从队列的开头移除并返回元素</li>
<li>int peek() 返回队列开头的元素</li>
<li>boolean empty() 如果队列为空，返回 true ；否则，返回 false</li>
</ul>
<p>说明：</p>
<ul>
<li>你 只能 使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>
</ul>]]></description></item><item><title>找出字符串中第一个匹配项的下标</title><link>https://wongpuiyan.github.io/28-find-the-index-of-the-first-occurrence-in-a-string/</link><pubDate>Fri, 07 Jul 2023 22:42:16 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/28-find-the-index-of-the-first-occurrence-in-a-string/</guid><description>&lt;h2 id="28-找出字符串中第一个匹配项的下标">28. 找出字符串中第一个匹配项的下标&lt;/h2>
&lt;p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回 -1 。&lt;/p></description></item><item><title>反转字符串</title><link>https://wongpuiyan.github.io/344-reverse-string/</link><pubDate>Thu, 06 Jul 2023 23:40:05 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/344-reverse-string/</guid><description>&lt;h2 id="344-反转字符串">344. 反转字符串&lt;/h2>
&lt;p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。
不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。&lt;/p></description></item><item><title>四数之和</title><link>https://wongpuiyan.github.io/18-4sum/</link><pubDate>Thu, 06 Jul 2023 23:39:40 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/18-4sum/</guid><description><![CDATA[<h2 id="18-四数之和">18. 四数之和</h2>
<p>给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<ul>
<li>0 &lt;= a, b, c, d &lt; n</li>
<li>a、b、c 和 d 互不相同</li>
<li>nums[a] + nums[b] + nums[c] + nums[d] == target</li>
</ul>
<p>你可以按 任意顺序 返回答案 。</p>]]></description></item><item><title>三数之和</title><link>https://wongpuiyan.github.io/15-3sum/</link><pubDate>Thu, 06 Jul 2023 23:39:18 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/15-3sum/</guid><description>&lt;h2 id="15-三数之和">15. 三数之和&lt;/h2>
&lt;p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请
你返回所有和为 0 且不重复的三元组。
注意：答案中不可以包含重复的三元组。&lt;/p></description></item><item><title>赎金信</title><link>https://wongpuiyan.github.io/383-ransom-note/</link><pubDate>Thu, 06 Jul 2023 23:17:19 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/383-ransom-note/</guid><description>&lt;h2 id="383-赎金信">383. 赎金信&lt;/h2>
&lt;p>给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。
如果可以，返回 true ；否则返回 false 。
magazine 中的每个字符只能在 ransomNote 中使用一次。&lt;/p></description></item><item><title>四数相加 II</title><link>https://wongpuiyan.github.io/454-4sum-ii/</link><pubDate>Wed, 05 Jul 2023 22:36:18 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/454-4sum-ii/</guid><description><![CDATA[<h2 id="454-四数相加-ii">454. 四数相加 II</h2>
<p>给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：</p>
<ul>
<li>0 &lt;= i, j, k, l &lt; n</li>
<li>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</li>
</ul>]]></description></item><item><title>两数之和</title><link>https://wongpuiyan.github.io/1-two-sum/</link><pubDate>Wed, 05 Jul 2023 21:58:58 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/1-two-sum/</guid><description>&lt;h2 id="1-两数之和">1. 两数之和&lt;/h2>
&lt;p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。&lt;/p></description></item><item><title>快乐数</title><link>https://wongpuiyan.github.io/202-happy-number/</link><pubDate>Wed, 05 Jul 2023 00:12:30 +0800</pubDate><author>NeoWong</author><guid>https://wongpuiyan.github.io/202-happy-number/</guid><description><![CDATA[<h2 id="202-快乐数">202. 快乐数</h2>
<p>编写一个算法来判断一个数 n 是不是快乐数。</p>
<p>「快乐数」 定义为：</p>
<p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
如果这个过程 结果为 1，那么这个数就是快乐数。
如果 n 是 快乐数 就返回 true ；不是，则返回 false 。</p>]]></description></item></channel></rss>